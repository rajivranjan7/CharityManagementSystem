/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.FinanceTeam;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.CommerceFinanceTeamLedgerRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AnimalWelfareKitInventoryRequest;
import Business.WorkQueue.CommerceFinanceRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author prabs
 */
public class CommerceFinanceTeamLedgerWorkAreaJPanel extends javax.swing.JPanel {
    
    private static JPanel container;
    private static EcoSystem system;
    private static Network network;
    private static Enterprise enterprise;
    private static UserAccount account;

    /**
     * Creates new form LedgerFinanceTeamWorkAreaJPanel
     */
    public CommerceFinanceTeamLedgerWorkAreaJPanel(JPanel container, EcoSystem system, Network network, Enterprise enterprise, UserAccount account) {
        initComponents();
        
        this.container = container;
        this.system = system;
        this.network = network;
        this.enterprise = enterprise;
        this.account = account;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFunds = new javax.swing.JTable();
        jLabelIncomingKit = new javax.swing.JLabel();
        btnAccept = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        tblFunds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request #", "Date", "Organization Type", "Funds", "Donor Name", "Source", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblFunds);
        if (tblFunds.getColumnModel().getColumnCount() > 0) {
            tblFunds.getColumnModel().getColumn(0).setMinWidth(0);
            tblFunds.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblFunds.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jLabelIncomingKit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelIncomingKit.setText("Incoming Funds");

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Marker Felt", 1, 36)); // NOI18N
        jLabel2.setText("Welcome Finance Ledger");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 1258, Short.MAX_VALUE)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelIncomingKit, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(587, 587, 587)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel2)
                .addGap(56, 56, 56)
                .addComponent(jLabelIncomingKit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(430, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Work Requests", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFunds.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblFunds.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already completed.");
                return;
            }
            else if (request.getStatus().equalsIgnoreCase("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already rejected.");
                return;
            }
            else if (request.getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                JOptionPane.showMessageDialog(null, "Request is already forwarded to the charity organization.");
                return;
            }
            else {
                if (request instanceof CommerceFinanceRequest) {
                    CommerceFinanceRequest fundRequest = (CommerceFinanceRequest) tblFunds.getValueAt(selectedRow, 0);
                }
                request.setReceiver(account);
                request.setStatus("Forwarded to Charity Organization");
                populateTable();
                populateRespectiveCharityWorkQueue();
                JOptionPane.showMessageDialog(null, "Request is forwarded to the charity organization");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a request to accept.");
            return;
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFunds.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblFunds.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already completed.");
                return;
            }
            else if (request.getStatus().equalsIgnoreCase("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already rejected.");
                return;
            }
            else if (request.getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                JOptionPane.showMessageDialog(null, "Request is already forwarded to Charity Organization.");
                return;
            }
            else {
                request.setReceiver(account);
                request.setStatus("Rejected");
                populateTable();
                JOptionPane.showMessageDialog(null, "Request is rejected");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a request to reject.");
            return;
        }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelIncomingKit;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblFunds;
    // End of variables declaration//GEN-END:variables

   
    
    public void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblFunds.getModel();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

        model.setRowCount(0);

        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (org.getWorkQueue() == null) {
                org.setWorkQueue(new WorkQueue());
            }
            for (WorkRequest workRequest : org.getWorkQueue().getWorkRequestList()) {

            if (workRequest instanceof CommerceFinanceRequest) {
                Object[] row = new Object[model.getColumnCount()];
                row[0] = workRequest;
                row[1] = formatter.format(((CommerceFinanceRequest) workRequest).getRequestDate());
                row[2] = ((CommerceFinanceRequest) workRequest).getOrgType();
                row[3] = ((CommerceFinanceRequest) workRequest).getAmount();
                row[4] = ((CommerceFinanceRequest) workRequest).getDonorName();
                row[5] = ((CommerceFinanceRequest) workRequest).getDonorType();
                row[6] = ((CommerceFinanceRequest) workRequest).getStatus();

                model.addRow(row);
            }
        }
    }

    }

    private void populateRespectiveCharityWorkQueue() {
        for(Enterprise ent2 : network.getEnterpriseDirectory().getEnterpriseList()){
                         if(ent2.getEnterpriseType() ==  Enterprise.EnterpriseType.FinanceManagementDirectory){
                             for(Organization org2 : ent2.getOrganizationDirectory().getOrganizationList()){
                                 if (org2.getWorkQueue() == null) {
                                    org2.setWorkQueue(new WorkQueue());
                                 }
                                 
                                 for (WorkRequest workRequest : org2.getWorkQueue().getWorkRequestList()) {
                                    for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
                                        if(ent.getEnterpriseType() ==  Enterprise.EnterpriseType.CharityDirectory){
                                            for(Organization org1 : ent.getOrganizationDirectory().getOrganizationList()){


                                                if (workRequest instanceof CommerceFinanceRequest) {
                                                    if((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.AnimalWelfareCharityOrganization) && (org1.getType() == Organization.Type.AnimalWelfareCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")){
                                                        if (org1.getWorkQueue() == null) {
                                                             org1.setWorkQueue(new WorkQueue());
                                                         }
                                                        if(!org1.getWorkQueue().getWorkRequestList().contains(workRequest)){
                                                            
                                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                                        }
                                                    }
                                                    else if((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.DisasterReliefCharityOrganization) && (org1.getType() == Organization.Type.DisasterReliefCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")){
                                                        if (org1.getWorkQueue() == null) {
                                                             org1.setWorkQueue(new WorkQueue());
                                                         }
                                                        if(!org1.getWorkQueue().getWorkRequestList().contains(workRequest)){
                                                            
                                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                                        }
                                                    }
                                                    else if((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.EducationCharityOrganization) && (org1.getType() == Organization.Type.EducationCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")){
                                                        if (org1.getWorkQueue() == null) {
                                                             org1.setWorkQueue(new WorkQueue());
                                                         }
                                                        if(!org1.getWorkQueue().getWorkRequestList().contains(workRequest)){
                                                            
                                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                                        }
                                                    }
                                                    else if((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.OrphanageCharityOrganization) && (org1.getType() == Organization.Type.OrphanageCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")){
                                                        if (org1.getWorkQueue() == null) {
                                                             org1.setWorkQueue(new WorkQueue());
                                                         }
                                                        if(!org1.getWorkQueue().getWorkRequestList().contains(workRequest)){
                                                            
                                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                                        }
                                                    }
                                                }
                                }
                            }
                        }

                    }
                }
            }
        }
    }
}

