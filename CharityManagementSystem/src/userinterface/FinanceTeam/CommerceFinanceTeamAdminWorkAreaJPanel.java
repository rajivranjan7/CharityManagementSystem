/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.FinanceTeam;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.CommerceFinanceTeamLedgerRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AnimalWelfareKitInventoryRequest;
import Business.WorkQueue.CommerceFinanceRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author prabs
 */
public class CommerceFinanceTeamAdminWorkAreaJPanel extends javax.swing.JPanel {

    private static JPanel container;
    private static EcoSystem system;
    private static Network network;
    private static Enterprise enterprise;
    private static UserAccount account;

    JFreeChart jchart;

    /**
     * Creates new form LedgerFinanceTeamWorkAreaJPanel
     */
    public CommerceFinanceTeamAdminWorkAreaJPanel(JPanel container, EcoSystem system, Network network, Enterprise enterprise, UserAccount account) {
        initComponents();

        this.container = container;
        this.system = system;
        this.network = network;
        this.enterprise = enterprise;
        this.account = account;
        populateOrganizationTable();
        populateOrganizationTypes();
        populateTable();
        populateBarGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrganizationList = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxOrgType = new javax.swing.JComboBox();
        txtUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAddOrganization = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxRole = new javax.swing.JComboBox();
        txtName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFunds = new javax.swing.JTable();
        jLabelIncomingKit = new javax.swing.JLabel();
        btnAccept = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jButtonDownloadReport = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanelReport = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 893));
        setLayout(null);

        jTabbedPane1.setForeground(new java.awt.Color(2, 55, 108));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jScrollPane1.setToolTipText("");

        tblOrganizationList.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(2, 55, 108)), javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(2, 55, 108))));
        tblOrganizationList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Organization Name", "Organization Type", "Username", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrganizationList);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 130, 1130, 194);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(2, 55, 108));
        jLabel5.setText("Organization List");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 100, 160, 22);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(2, 55, 108));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Organization Type");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(250, 380, 170, 22);

        comboBoxOrgType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxOrgType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxOrgTypeActionPerformed(evt);
            }
        });
        jPanel1.add(comboBoxOrgType);
        comboBoxOrgType.setBounds(450, 370, 220, 40);
        jPanel1.add(txtUsername);
        txtUsername.setBounds(450, 590, 220, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(2, 55, 108));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Organization Name");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(240, 520, 174, 22);

        btnAddOrganization.setBackground(new java.awt.Color(2, 55, 108));
        btnAddOrganization.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddOrganization.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOrganization.setText("Add Organization");
        btnAddOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrganizationActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddOrganization);
        btnAddOrganization.setBounds(450, 760, 220, 40);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(2, 55, 108));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Username");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(300, 600, 120, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(2, 55, 108));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Password");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(300, 680, 120, 22);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(2, 55, 108));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Role");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(330, 450, 90, 22);

        comboBoxRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(comboBoxRole);
        comboBoxRole.setBounds(450, 440, 220, 40);
        jPanel1.add(txtName);
        txtName.setBounds(450, 510, 220, 40);
        jPanel1.add(txtPassword);
        txtPassword.setBounds(450, 670, 220, 40);

        btnDelete.setBackground(new java.awt.Color(2, 55, 108));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);
        btnDelete.setBounds(980, 340, 160, 40);

        jLabel9.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(2, 55, 108));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Welcome Finance Admin");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(10, 50, 1140, 32);

        jTabbedPane1.addTab("Manage Organization", jPanel1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(null);

        tblFunds.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(2, 55, 108)), javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(2, 55, 108))));
        tblFunds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request #", "Date", "Organization Type", "Funds", "Donor Name", "Source", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblFunds);
        if (tblFunds.getColumnModel().getColumnCount() > 0) {
            tblFunds.getColumnModel().getColumn(0).setMinWidth(0);
            tblFunds.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblFunds.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 130, 1130, 177);

        jLabelIncomingKit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelIncomingKit.setForeground(new java.awt.Color(2, 55, 108));
        jLabelIncomingKit.setText("Incoming Funds");
        jPanel3.add(jLabelIncomingKit);
        jLabelIncomingKit.setBounds(10, 90, 178, 37);

        btnAccept.setBackground(new java.awt.Color(2, 55, 108));
        btnAccept.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAccept.setForeground(new java.awt.Color(255, 255, 255));
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        jPanel3.add(btnAccept);
        btnAccept.setBounds(1010, 320, 123, 36);

        btnReject.setBackground(new java.awt.Color(2, 55, 108));
        btnReject.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        jPanel3.add(btnReject);
        btnReject.setBounds(870, 320, 123, 36);

        jButtonDownloadReport.setBackground(new java.awt.Color(2, 55, 108));
        jButtonDownloadReport.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonDownloadReport.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDownloadReport.setText("Download");
        jButtonDownloadReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadReportActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonDownloadReport);
        jButtonDownloadReport.setBounds(220, 539, 130, 40);

        jPanelReport.setLayout(new javax.swing.BoxLayout(jPanelReport, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelReport, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelReport, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel4);
        jPanel4.setBounds(399, 424, 741, 351);

        jLabel11.setFont(new java.awt.Font("Marker Felt", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(2, 55, 108));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Welcome Finance Admin");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(10, 50, 1140, 32);

        jTabbedPane1.addTab("Manage Work Requests", jPanel3);

        add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 90, 1155, 893);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(2, 55, 108));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Finance Admin");
        add(jLabel10);
        jLabel10.setBounds(18, 11, 1116, 67);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/icons8-manager-100.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 110, 90);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxOrgTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxOrgTypeActionPerformed
        // TODO add your handling code here:
        Organization.Type type = (Organization.Type) comboBoxOrgType.getSelectedItem();
        if (type == Organization.Type.CommerceFinanaceManagementOrganization) {
            comboBoxRole.removeAllItems();
            comboBoxRole.addItem(Role.RoleType.CommerceFinanceTeamLedgerRole);
        }
    }//GEN-LAST:event_comboBoxOrgTypeActionPerformed

    private void btnAddOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrganizationActionPerformed
        // TODO add your handling code here:
        String name = txtUsername.getText().trim();
        Organization.Type type = (Organization.Type) comboBoxOrgType.getSelectedItem();
        if (!name.isEmpty()) {
            Organization org = enterprise.getOrganizationDirectory().createOrganization(type, txtName.getText());
            if (type == Organization.Type.CommerceFinanaceManagementOrganization) {
                System.out.println("CommerceFinanaceManagementOrganization");
                if (org.getType() == Organization.Type.CommerceFinanaceManagementOrganization) {
                    Employee emp = org.getEmployeeDirectory().createEmployee(txtName.getText());
                    UserAccount ua1 = org.getUserAccountDirectory().createUserAccount(txtUsername.getText(), txtPassword.getText(), emp, new CommerceFinanceTeamLedgerRole());

                }
            }

            JOptionPane.showMessageDialog(null, "Organization Successfully Created");
            txtUsername.setText("");
            txtPassword.setText("");
            txtName.setText("");
            comboBoxOrgType.setSelectedIndex(0);

        } else {
            JOptionPane.showMessageDialog(null, "Enter Organization name");
        }
        populateOrganizationTable();
    }//GEN-LAST:event_btnAddOrganizationActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        int selectedRow = tblOrganizationList.getSelectedRow();
        if (selectedRow < 0) {
            flag = false;
            JOptionPane.showMessageDialog(this, "Please select a row to delete!");
        }
        if (flag) {
            DefaultTableModel tableModel = (DefaultTableModel) tblOrganizationList.getModel();
            Object org = tableModel.getValueAt(selectedRow, 0);
            Organization.Type type = (Organization.Type) tableModel.getValueAt(selectedRow, 1);
            ArrayList<Organization> orgList = enterprise.getOrganizationDirectory().getOrganizationList();
            for (int i = 0; i < enterprise.getOrganizationDirectory().getOrganizationList().size(); i++) {
                if ((orgList.get(i).getName() == String.valueOf(org)) && (orgList.get(i).getType() == type)) {
                    enterprise.getOrganizationDirectory().getOrganizationList().remove(i);
                    populateOrganizationTable();
                    break;
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFunds.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblFunds.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already completed.");
                return;
            } else if (request.getStatus().equalsIgnoreCase("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already rejected.");
                return;
            } else if (request.getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                JOptionPane.showMessageDialog(null, "Request is already forwarded to the charity organization.");
                return;
            } else {
                if (request instanceof CommerceFinanceRequest) {
                    CommerceFinanceRequest fundRequest = (CommerceFinanceRequest) tblFunds.getValueAt(selectedRow, 0);
                }
                request.setReceiver(account);
                request.setStatus("Forwarded to Charity Organization");
                populateTable();
                populateRespectiveCharityWorkQueue();
                JOptionPane.showMessageDialog(null, "Request is forwarded to the charity organization");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a request to accept.");
            return;
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFunds.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) tblFunds.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already completed.");
                return;
            } else if (request.getStatus().equalsIgnoreCase("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already rejected.");
                return;
            } else if (request.getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                JOptionPane.showMessageDialog(null, "Request is already forwarded to Charity Organization.");
                return;
            } else {
                request.setReceiver(account);
                request.setStatus("Rejected");
                populateTable();
                populateRespectiveCharityWorkQueue();
                JOptionPane.showMessageDialog(null, "Request is rejected");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a request to reject.");
            return;
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void jButtonDownloadReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadReportActionPerformed
        // TODO add your handling code here:
        try {
            int width = 640;
            int height = 480;
            File BarChart = new File("ReportFunds.jpeg");
            ChartUtilities.saveChartAsJPEG(BarChart, jchart, width, height);
            JOptionPane.showMessageDialog(null, "Report has been downloaded successfully!");
        } catch (IOException ex) {
            Logger.getLogger("Exception");
        }
    }//GEN-LAST:event_jButtonDownloadReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAddOrganization;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReject;
    private javax.swing.JComboBox comboBoxOrgType;
    private javax.swing.JComboBox comboBoxRole;
    private javax.swing.JButton jButtonDownloadReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelIncomingKit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblFunds;
    private javax.swing.JTable tblOrganizationList;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void populateOrganizationTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrganizationList.getModel();

        model.setRowCount(0);
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getName() == enterprise.getName()) {
                for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                    Object[] row = new Object[4];
                    row[0] = org.getName();
                    row[1] = org.getType();
                    for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                        if (ua.getRole().toString().equals(Role.RoleType.CommerceFinanceTeamLedgerRole.toString())) {
                            row[2] = ua.getUsername();
                            row[3] = ua.getPassword();
                        }
                    }
                    model.addRow(row);
                }
            }
        }
    }

    private void populateOrganizationTypes() {
        comboBoxOrgType.removeAllItems();
        comboBoxOrgType.addItem(Organization.Type.CommerceFinanaceManagementOrganization);
    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) tblFunds.getModel();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

        model.setRowCount(0);

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getWorkQueue() == null) {
                org.setWorkQueue(new WorkQueue());
            }
            for (WorkRequest workRequest : org.getWorkQueue().getWorkRequestList()) {

                if (workRequest instanceof CommerceFinanceRequest) {
                    Object[] row = new Object[model.getColumnCount()];
                    row[0] = workRequest;
                    row[1] = formatter.format(((CommerceFinanceRequest) workRequest).getRequestDate());
                    row[2] = ((CommerceFinanceRequest) workRequest).getOrgType();
                    row[3] = ((CommerceFinanceRequest) workRequest).getAmount();
                    row[4] = ((CommerceFinanceRequest) workRequest).getDonorName();
                    row[5] = ((CommerceFinanceRequest) workRequest).getDonorType();
                    row[6] = ((CommerceFinanceRequest) workRequest).getStatus();

                    model.addRow(row);
                }
            }
        }

    }

    private void populateRespectiveCharityWorkQueue() {
        for (Enterprise ent2 : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (ent2.getEnterpriseType() == Enterprise.EnterpriseType.FinanceManagementDirectory) {
                for (Organization org2 : ent2.getOrganizationDirectory().getOrganizationList()) {
                    if (org2.getWorkQueue() == null) {
                        org2.setWorkQueue(new WorkQueue());
                    }

                    for (WorkRequest workRequest : org2.getWorkQueue().getWorkRequestList()) {
                        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                            if (ent.getEnterpriseType() == Enterprise.EnterpriseType.CharityDirectory) {
                                for (Organization org1 : ent.getOrganizationDirectory().getOrganizationList()) {

                                    if (workRequest instanceof CommerceFinanceRequest) {
                                        if ((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.AnimalWelfareCharityOrganization) && (org1.getType() == Organization.Type.AnimalWelfareCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                                            if (org1.getWorkQueue() == null) {
                                                org1.setWorkQueue(new WorkQueue());
                                            }
                                            if (!org1.getWorkQueue().getWorkRequestList().contains(workRequest)) {

                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                            }
                                        } else if ((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.DisasterReliefCharityOrganization) && (org1.getType() == Organization.Type.DisasterReliefCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                                            if (org1.getWorkQueue() == null) {
                                                org1.setWorkQueue(new WorkQueue());
                                            }
                                            if (!org1.getWorkQueue().getWorkRequestList().contains(workRequest)) {

                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                            }
                                        } else if ((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.EducationCharityOrganization) && (org1.getType() == Organization.Type.EducationCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                                            if (org1.getWorkQueue() == null) {
                                                org1.setWorkQueue(new WorkQueue());
                                            }
                                            if (!org1.getWorkQueue().getWorkRequestList().contains(workRequest)) {

                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                            }
                                        } else if ((((CommerceFinanceRequest) workRequest).getOrgType() == Organization.Type.OrphanageCharityOrganization) && (org1.getType() == Organization.Type.OrphanageCharityOrganization) && ((CommerceFinanceRequest) workRequest).getStatus().equalsIgnoreCase("Forwarded to Charity Organization")) {
                                            if (org1.getWorkQueue() == null) {
                                                org1.setWorkQueue(new WorkQueue());
                                            }
                                            if (!org1.getWorkQueue().getWorkRequestList().contains(workRequest)) {

                                                org1.getWorkQueue().getWorkRequestList().add(workRequest);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
    }

    private void populateBarGraph() {
        DefaultTableModel dtm = (DefaultTableModel) tblFunds.getModel();
        int rowCount = dtm.getRowCount();
        //System.out.println("Rowcount + "+ rowCount);
        int count=0;
        double awfunds = 0.0;
        double drfunds = 0.0;
        double efunds = 0.0;
        double ofunds = 0.0;
        while(count<rowCount){
            if(tblFunds.getValueAt(count, 2).toString().contains("nimal")){
                awfunds += Double.parseDouble(tblFunds.getValueAt(count, 3).toString());
            }
            if(tblFunds.getValueAt(count, 2).toString().contains("isaster")){
                drfunds += Double.parseDouble(tblFunds.getValueAt(count, 3).toString());
            }
            if(tblFunds.getValueAt(count, 2).toString().contains("cation")){
                efunds += Double.parseDouble(tblFunds.getValueAt(count, 3).toString());
            }
            if(tblFunds.getValueAt(count, 2).toString().contains("rphan")){
                ofunds += Double.parseDouble(tblFunds.getValueAt(count, 3).toString());
            }
            count++;
        }
        System.out.println("AW: " + awfunds);
        System.out.println("DR: " + drfunds);
        System.out.println("E: " + efunds);
        System.out.println("O: " + ofunds);

        DefaultCategoryDataset data = new DefaultCategoryDataset();

        data.setValue(awfunds, "TotalFunds", "Animal Welfare");
        data.setValue(drfunds, "TotalFunds", "Disaster Relief");
        data.setValue(efunds, "TotalFunds", "Education");
        data.setValue(ofunds, "TotalFunds", "Orphanage");
        jchart = ChartFactory.createBarChart3D("Total Donations", "Organization", "Funds", data, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);

//        ChartFrame chartframe = new ChartFrame("Total Donations Record", jchart,true);
//        chartframe.setVisible(true);
//        chartframe.setSize(500,400);
        ChartPanel chartPanel = new ChartPanel(jchart);

        jPanelReport.removeAll();
        jPanelReport.add(chartPanel);
        jPanelReport.updateUI();
        System.out.println("Funds Chart Created");

    }
}
