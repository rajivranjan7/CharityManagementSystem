/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.DonorRegistration;

import Business.Utilities.HeaderColors;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Utilities.Validation;
import Business.WorkQueue.DonorRegistrationRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamResolution;
//import Business.WorkQueue.UserRegistrationRequest;

import java.awt.event.ActionListener;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.BorderFactory;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import java.time.Duration;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.animation.PauseTransition;
import javax.imageio.ImageIO;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author prabs
 */
public class DonorRegistrationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserRegistrationJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private Validation validation;
    private ActionListener eventListener;
    private boolean emailValid;
    private boolean contactValid;
    private boolean userUnique;
    private boolean isRunning = false;

//    Webcam webcam = Webcam.getDefault();

    public DonorRegistrationJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
    //    webcam.setViewSize(new Dimension(176, 144));
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateNetworkComboBox();
        populateMobileNetworkComboBox();
        validation = new Validation();
        jLabelUsernameExists.setVisible(false);
        jLabeluserNameSuccess.setVisible(false);
        jLabelEmailIncorrect.setVisible(false);
        jLabelEmailSuccess.setVisible(false);
        populateOrganizationTypes();

    }

    public void populateNetworkComboBox() {
        jComboBoxNetwork.removeAllItems();
        for (Network network : system.getNetworkList()) {
            jComboBoxNetwork.addItem(network);
        }
    }

    public void populateMobileNetworkComboBox() {
        jComboBoxMobileNetwork.removeAllItems();
        jComboBoxMobileNetwork.addItem("AT&T");
        jComboBoxMobileNetwork.addItem("TMobile");
        jComboBoxMobileNetwork.addItem("Verizon");
        jComboBoxMobileNetwork.addItem("Mint");
        jComboBoxMobileNetwork.addItem("Lyka");
    }

    public void populateOrganizationTypes() {
        jComboBoxOrganization.removeAllItems();
        jComboBoxOrganization.addItem(Organization.Type.DonorCSR);
        jComboBoxOrganization.addItem(Organization.Type.DonorIndividual);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelUsername = new javax.swing.JLabel();
        jLabelPassword = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabelState = new javax.swing.JLabel();
        jLabelOrganization = new javax.swing.JLabel();
        jLabelCarrier = new javax.swing.JLabel();
        jLabelContact = new javax.swing.JLabel();
        jLabelLocation = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldUsername = new javax.swing.JTextField();
        jTextFieldPassword = new javax.swing.JTextField();
        jTextFieldEmailID = new javax.swing.JTextField();
        jTextFieldContact = new javax.swing.JTextField();
        jTextFieldAddress = new javax.swing.JTextField();
        jButtonRegister = new javax.swing.JButton();
        jLabelUsernameExists = new javax.swing.JLabel();
        jLabelEmailIncorrect = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxNetwork = new javax.swing.JComboBox();
        jComboBoxOrganization = new javax.swing.JComboBox();
        jComboBoxMobileNetwork = new javax.swing.JComboBox<>();
        jLabeluserNameSuccess = new javax.swing.JLabel();
        jLabelEmailSuccess = new javax.swing.JLabel();
        jButtonClickImage = new javax.swing.JButton();
        jLabelImageHolder = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(900, 900));
        setLayout(null);

        jLabelTitle.setFont(new java.awt.Font("Marker Felt", 1, 48)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(2, 55, 108));
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("DONOR REGISTRATION");
        add(jLabelTitle);
        jLabelTitle.setBounds(0, 40, 1148, 50);

        jLabelName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelName.setForeground(new java.awt.Color(2, 55, 108));
        jLabelName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelName.setText("Name:");
        add(jLabelName);
        jLabelName.setBounds(410, 160, 138, 23);

        jLabelUsername.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelUsername.setForeground(new java.awt.Color(2, 55, 108));
        jLabelUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelUsername.setText("Username:");
        add(jLabelUsername);
        jLabelUsername.setBounds(410, 220, 138, 23);

        jLabelPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelPassword.setForeground(new java.awt.Color(2, 55, 108));
        jLabelPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPassword.setText("Password:");
        add(jLabelPassword);
        jLabelPassword.setBounds(410, 280, 138, 23);

        jLabelEmail.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelEmail.setForeground(new java.awt.Color(2, 55, 108));
        jLabelEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelEmail.setText("Email ID:");
        add(jLabelEmail);
        jLabelEmail.setBounds(410, 340, 138, 23);

        jLabelState.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelState.setForeground(new java.awt.Color(2, 55, 108));
        jLabelState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelState.setText("Network:");
        add(jLabelState);
        jLabelState.setBounds(410, 460, 138, 23);

        jLabelOrganization.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelOrganization.setForeground(new java.awt.Color(2, 55, 108));
        jLabelOrganization.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelOrganization.setText("Organization:");
        add(jLabelOrganization);
        jLabelOrganization.setBounds(400, 520, 150, 23);

        jLabelCarrier.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelCarrier.setForeground(new java.awt.Color(2, 55, 108));
        jLabelCarrier.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCarrier.setText("Mobile Network:");
        add(jLabelCarrier);
        jLabelCarrier.setBounds(370, 580, 180, 23);

        jLabelContact.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelContact.setForeground(new java.awt.Color(2, 55, 108));
        jLabelContact.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelContact.setText("Contact:");
        add(jLabelContact);
        jLabelContact.setBounds(410, 640, 138, 23);

        jLabelLocation.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelLocation.setForeground(new java.awt.Color(2, 55, 108));
        jLabelLocation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelLocation.setText("Address:");
        add(jLabelLocation);
        jLabelLocation.setBounds(470, 400, 78, 23);

        jTextFieldName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyTyped(evt);
            }
        });
        add(jTextFieldName);
        jTextFieldName.setBounds(610, 150, 240, 40);

        jTextFieldUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUsernameActionPerformed(evt);
            }
        });
        jTextFieldUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldUsernameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldUsernameKeyReleased(evt);
            }
        });
        add(jTextFieldUsername);
        jTextFieldUsername.setBounds(610, 210, 240, 40);

        jTextFieldPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordActionPerformed(evt);
            }
        });
        jTextFieldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPasswordKeyTyped(evt);
            }
        });
        add(jTextFieldPassword);
        jTextFieldPassword.setBounds(610, 270, 240, 40);

        jTextFieldEmailID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldEmailID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEmailIDActionPerformed(evt);
            }
        });
        jTextFieldEmailID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmailIDKeyTyped(evt);
            }
        });
        add(jTextFieldEmailID);
        jTextFieldEmailID.setBounds(610, 330, 240, 40);

        jTextFieldContact.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldContactKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldContactKeyTyped(evt);
            }
        });
        add(jTextFieldContact);
        jTextFieldContact.setBounds(610, 630, 240, 40);

        jTextFieldAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAddressKeyTyped(evt);
            }
        });
        add(jTextFieldAddress);
        jTextFieldAddress.setBounds(610, 390, 240, 40);

        jButtonRegister.setBackground(new java.awt.Color(2, 55, 108));
        jButtonRegister.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonRegister.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRegister.setText("Register");
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        add(jButtonRegister);
        jButtonRegister.setBounds(610, 710, 240, 50);

        jLabelUsernameExists.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelUsernameExists.setForeground(new java.awt.Color(255, 0, 0));
        jLabelUsernameExists.setText("Username Already Exists!");
        add(jLabelUsernameExists);
        jLabelUsernameExists.setBounds(920, 220, 144, 14);

        jLabelEmailIncorrect.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelEmailIncorrect.setForeground(new java.awt.Color(255, 0, 0));
        jLabelEmailIncorrect.setText("Incorrect Email Format!");
        add(jLabelEmailIncorrect);
        jLabelEmailIncorrect.setBounds(920, 340, 133, 14);
        add(jLabel1);
        jLabel1.setBounds(793, 144, 93, 25);

        jComboBoxNetwork.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxNetwork.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxNetwork.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNetworkItemStateChanged(evt);
            }
        });
        jComboBoxNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNetworkActionPerformed(evt);
            }
        });
        add(jComboBoxNetwork);
        jComboBoxNetwork.setBounds(610, 450, 240, 40);

        jComboBoxOrganization.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxOrganization.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxOrganization.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOrganizationItemStateChanged(evt);
            }
        });
        jComboBoxOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOrganizationActionPerformed(evt);
            }
        });
        jComboBoxOrganization.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBoxOrganizationKeyTyped(evt);
            }
        });
        add(jComboBoxOrganization);
        jComboBoxOrganization.setBounds(610, 510, 240, 40);

        jComboBoxMobileNetwork.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxMobileNetwork.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxMobileNetwork.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxMobileNetworkItemStateChanged(evt);
            }
        });
        jComboBoxMobileNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMobileNetworkActionPerformed(evt);
            }
        });
        jComboBoxMobileNetwork.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jComboBoxMobileNetworkKeyTyped(evt);
            }
        });
        add(jComboBoxMobileNetwork);
        jComboBoxMobileNetwork.setBounds(610, 570, 240, 40);

        jLabeluserNameSuccess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/tick1.4.gif"))); // NOI18N
        add(jLabeluserNameSuccess);
        jLabeluserNameSuccess.setBounds(870, 210, 40, 33);

        jLabelEmailSuccess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/tick1.4.gif"))); // NOI18N
        add(jLabelEmailSuccess);
        jLabelEmailSuccess.setBounds(870, 330, 40, 33);

        jButtonClickImage.setBackground(new java.awt.Color(2, 55, 108));
        jButtonClickImage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonClickImage.setForeground(new java.awt.Color(255, 255, 255));
        jButtonClickImage.setText("Capture Image");
        jButtonClickImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClickImageActionPerformed(evt);
            }
        });
        add(jButtonClickImage);
        jButtonClickImage.setBounds(90, 440, 180, 40);
        add(jLabelImageHolder);
        jLabelImageHolder.setBounds(10, 100, 380, 310);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PictureUI/donating-art-to-charity.png"))); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(920, 190, 980, 650);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldUsernameActionPerformed

    private void jTextFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPasswordActionPerformed

    private void jTextFieldEmailIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEmailIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEmailIDActionPerformed

    private void jTextFieldNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyPressed
        // TODO add your handling code here:
        validation.stringValidator(evt, jTextFieldName);
    }//GEN-LAST:event_jTextFieldNameKeyPressed

    private void jTextFieldUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUsernameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldUsernameKeyPressed

    private void jTextFieldUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUsernameKeyReleased
        // TODO add your handling code here:
        if (!system.checkIfUserIsUnique(jTextFieldUsername.getText())) {
            jLabelUsernameExists.setVisible(true);
            //userNameSuccessLabel.setVisible(false);
            userUnique = false;
        } else {
            jTextFieldUsername.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            jTextFieldUsername.setForeground(Color.BLACK);
            jLabelUsernameExists.setVisible(false);
            //userNameSuccessLabel.setVisible(true);
            userUnique = true;
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    //userNameSuccessLabel.setVisible(false);
                }
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_jTextFieldUsernameKeyReleased

    private void jTextFieldPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPasswordKeyTyped
        // TODO add your handling code here:
        jTextFieldPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jTextFieldPassword.setForeground(Color.BLACK);
    }//GEN-LAST:event_jTextFieldPasswordKeyTyped

    private void jTextFieldEmailIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmailIDKeyTyped
        // TODO add your handling code here:
        if (!validation.emailValidator(jTextFieldEmailID.getText())) {
            jLabelEmailIncorrect.setVisible(true);
            emailValid = false;
        } else {
            jTextFieldEmailID.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            jTextFieldEmailID.setForeground(Color.BLACK);
            jLabelEmailIncorrect.setVisible(false);
            //emailSuccessLabel.setVisible(true);
            emailValid = true;
            int delay = 2500; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    //emailSuccessLabel.setVisible(false);
                }
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_jTextFieldEmailIDKeyTyped

    private void jComboBoxNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNetworkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxNetworkActionPerformed

    private void jComboBoxOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOrganizationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOrganizationActionPerformed

    private void jComboBoxOrganizationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxOrganizationKeyTyped
        // TODO add your handling code here:
//        jComboBoxOrganization.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//        jComboBoxOrganization.setForeground(Color.BLACK);
    }//GEN-LAST:event_jComboBoxOrganizationKeyTyped

    private void jComboBoxMobileNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMobileNetworkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMobileNetworkActionPerformed

    private void jComboBoxMobileNetworkKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxMobileNetworkKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMobileNetworkKeyTyped

    private void jTextFieldContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContactKeyPressed
        // TODO add your handling code here:
        validation.integerValidator(evt, jTextFieldName);
    }//GEN-LAST:event_jTextFieldContactKeyPressed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        // TODO add your handling code here:
        Network network = (Network) jComboBoxNetwork.getSelectedItem();
        Organization.Type type = (Organization.Type) jComboBoxOrganization.getSelectedItem();

        if (network == null) {
            jComboBoxNetwork.setBorder(BorderFactory.createLineBorder(Color.RED));
            jComboBoxNetwork.setForeground(Color.red);

        }

        if (jTextFieldName.getText().isEmpty()) {
            jTextFieldName.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldName.setForeground(Color.red);
        }
        if (jTextFieldUsername.getText().isEmpty()) {
            jTextFieldUsername.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldUsername.setForeground(Color.red);

        }
        if (jTextFieldPassword.getText().isEmpty()) {
            jTextFieldPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldPassword.setForeground(Color.red);

        }
        if (jTextFieldEmailID.getText().isEmpty()) {
            jTextFieldEmailID.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldEmailID.setForeground(Color.red);

        }
        if (jTextFieldAddress.getText().isEmpty()) {
            jTextFieldAddress.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldAddress.setForeground(Color.red);

        }

        if (type == null) {
            jComboBoxOrganization.setBorder(BorderFactory.createLineBorder(Color.RED));
            jComboBoxOrganization.setForeground(Color.red);

        }
        if (jTextFieldContact.getText().isEmpty()) {
            jTextFieldContact.setBorder(BorderFactory.createLineBorder(Color.RED));
            jTextFieldContact.setForeground(Color.red);

        }
        if (jTextFieldName.getText().isEmpty()
                || jTextFieldPassword.getText().isEmpty()
                || jTextFieldEmailID.getText().isEmpty()
                || jTextFieldAddress.getText().isEmpty()
                || type == null
                || jTextFieldContact.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Kindly Provide all the Details!");
        } else if (!isValidContact(jTextFieldContact.getText())) {
            JOptionPane.showMessageDialog(null, "Phone format incorrect");
        } else if (emailValid && userUnique) {
            //workqueue
            DonorRegistrationRequest registrationRequest = new DonorRegistrationRequest();
            registrationRequest.setName(jTextFieldName.getText());
            registrationRequest.setUserName(jTextFieldUsername.getText());
            registrationRequest.setUserPassword(jTextFieldPassword.getText());
            registrationRequest.setUserEmailId(jTextFieldEmailID.getText());
            registrationRequest.setNetwork(network);
            registrationRequest.setUserAddress(jTextFieldAddress.getText());
            registrationRequest.setOrgType(type);

            for (Network n : system.getNetworkList()) {
                if (n.getName().equals(network.getName())) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if ((org.getType() == Organization.Type.DonorCSR) && type == Organization.Type.DonorCSR) {
                                registrationRequest.setEnterprise(e);
                            } else if ((org.getType() == Organization.Type.DonorIndividual) && type == Organization.Type.DonorIndividual) {
                                registrationRequest.setEnterprise(e);
                            }
                        }
                    }
                }
            }

            registrationRequest.setStatus("Requested");
            registrationRequest.setUserContact(jTextFieldContact.getText());

            String contact = "";
            if (jComboBoxMobileNetwork.getSelectedItem().equals("AT&T")) {
                contact = jTextFieldContact.getText() + "@txt.att.net";
            } else if (jComboBoxMobileNetwork.getSelectedItem().equals("Verizon")) {
                contact = jTextFieldContact.getText() + "@vmobl.com";
            } else if (jComboBoxMobileNetwork.getSelectedItem().equals("Sprint")) {
                contact = jTextFieldContact.getText() + "@messaging.sprintpcs.com";
            } else if (jComboBoxMobileNetwork.getSelectedItem().equals("TMobile")) {
                contact = jTextFieldContact.getText() + "@tmomail.net";
            }
            registrationRequest.setContactCarrierName(contact);
            registrationRequest.setRequestDate(new Date());
            
            sendEmailMessage(jTextFieldEmailID.getText());
            sendTextMessage(contact);
            for (Network n : system.getNetworkList()) {

            for (Enterprise enterprise : n.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise.getEnterpriseType() == Enterprise.EnterpriseType.DonorDirectory){
                   if (enterprise.getWorkQueue() == null) {
                            enterprise.setWorkQueue(new WorkQueue());
                        }
                   enterprise.getWorkQueue().getWorkRequestList().add(registrationRequest);

                }
            }
        }
            JOptionPane.showMessageDialog(null, "You have been registered succesfully!");
            jTextFieldName.setText("");
            jTextFieldUsername.setText("");
            jTextFieldPassword.setText("");
            jTextFieldEmailID.setText("");
            jTextFieldAddress.setText("");
            jTextFieldContact.setText("");
            jTextFieldAddress.setText("");
        } else if (!emailValid || !contactValid || !userUnique) {
            JOptionPane.showMessageDialog(null, "Entered Credentials are Invalid!");
        }            
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    private void jTextFieldNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyTyped
        // TODO add your handling code here:
        jTextFieldName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jTextFieldName.setForeground(Color.BLACK);
    }//GEN-LAST:event_jTextFieldNameKeyTyped

    private void jComboBoxNetworkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNetworkItemStateChanged
        // TODO add your handling code here:
        jComboBoxNetwork.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jComboBoxNetwork.setForeground(Color.BLACK);
    }//GEN-LAST:event_jComboBoxNetworkItemStateChanged

    private void jComboBoxOrganizationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxOrganizationItemStateChanged
        // TODO add your handling code here:
        jComboBoxOrganization.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jComboBoxOrganization.setForeground(Color.BLACK);
    }//GEN-LAST:event_jComboBoxOrganizationItemStateChanged

    private void jComboBoxMobileNetworkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxMobileNetworkItemStateChanged
        // TODO add your handling code here:
        jComboBoxMobileNetwork.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jComboBoxMobileNetwork.setForeground(Color.BLACK);
    }//GEN-LAST:event_jComboBoxMobileNetworkItemStateChanged

    private void jButtonClickImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClickImageActionPerformed
        // TODO add your handling code here:
    /*    if (!isRunning) {
            isRunning = true;
            new VideoFeedTaker().start();
        } else {
            isRunning = false;
            try {
                ImageIO.write(webcam.getImage(), "JPG", new File("UserCapture.jpg"));
            } catch (IOException ex) {
                Logger.getLogger(DonorRegistrationJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            Image image = webcam.getImage();
            jLabelImageHolder.setIcon(new ImageIcon(image));
            webcam.close();
        }
//        for (Dimension size : webcam.getViewSizes()) {
//            System.out.println(size);
//        }

//        webcam.setViewSize(WebcamResolution.HQVGA.getSize());
//        webcam.open();
//        
//        webcam.close();
    */
    }//GEN-LAST:event_jButtonClickImageActionPerformed

    private void jTextFieldAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddressKeyTyped
        // TODO add your handling code here:
        jTextFieldAddress.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jTextFieldAddress.setForeground(Color.BLACK);
    }//GEN-LAST:event_jTextFieldAddressKeyTyped

    private void jTextFieldContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldContactKeyTyped
        // TODO add your handling code here:
        jTextFieldContact.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jTextFieldContact.setForeground(Color.BLACK);
    }//GEN-LAST:event_jTextFieldContactKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClickImage;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JComboBox<String> jComboBoxMobileNetwork;
    private javax.swing.JComboBox jComboBoxNetwork;
    private javax.swing.JComboBox jComboBoxOrganization;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCarrier;
    private javax.swing.JLabel jLabelContact;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelEmailIncorrect;
    private javax.swing.JLabel jLabelEmailSuccess;
    private javax.swing.JLabel jLabelImageHolder;
    private javax.swing.JLabel jLabelLocation;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelOrganization;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelState;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JLabel jLabelUsernameExists;
    private javax.swing.JLabel jLabeluserNameSuccess;
    private javax.swing.JTextField jTextFieldAddress;
    private javax.swing.JTextField jTextFieldContact;
    private javax.swing.JTextField jTextFieldEmailID;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables

    private boolean isValidContact(String text) {
        String regex = "^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$";
        Pattern pattern = Pattern.compile(regex);

        Matcher matcher = pattern.matcher(text);
        if (matcher.matches()) {
            return true;
        }
        return false;
    }

    private void sendEmailMessage(String emailID) {
        // Recipient's email ID needs to be mentioned.
        String to = emailID;
        String from = "0charitym0@gmail.com";
        String pass = "00Charity00";

// Get system properties
        Properties properties = System.getProperties();
        String host = "smtp.gmail.com";

        properties.put("mail.smtp.starttls.enable", "true");

        properties.put("mail.smtp.ssl.trust", host);
        properties.put("mail.smtp.user", from);
// properties.put("mail.smtp.password", pass);
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");

        Session session = Session.getDefaultInstance(properties);

        try {
// Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

// Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

// Set To: header field of the header.
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

// Set Subject: header field
            message.setSubject("New Registration for Charity Management System");
            message.setText("You have been successfully registered. Thank you!");
// Send message
            Transport transport = session.getTransport("smtp");
            transport.connect(host, from, pass);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
            System.out.println("Sent message successfully....");
        } catch (MessagingException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Email ID is invalid!.");
        }
    }

    private void sendTextMessage(String contact) {
        String to = contact;
        System.out.println(contact);
        String from = "0charitym0@gmail.com";
        String pass = "00Charity00";
        // Assuming you are sending email from localhost
        // String host = "192.168.0.16";
        // Get system properties
        Properties properties = System.getProperties();
        String host = "smtp.gmail.com";
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.ssl.trust", host);
        properties.put("mail.smtp.user", from);
        // properties.put("mail.smtp.password", pass);
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");
        // Setup mail server
        // properties.setProperty("mail.smtp.host", host);
        //  properties.put("mail.smtp.starttls.enable", "true");
        // Get the default Session object.
        Session session = Session.getDefaultInstance(properties);
        //       final PasswordAuthentication auth = new PasswordAuthentication(from, pass);
//Session session = Session.getDefaultInstance(properties, new Authenticator() {
//    @Override
//    protected PasswordAuthentication getPasswordAuthentication() { return auth; }
//});
//Session session = Session.getInstance(properties);
        try {
            // Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

            // Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

            // Set To: header field of the header.
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

            // Set Subject: header field
            message.setSubject("New Registration for Charity Management System");
            message.setText("You have been successfully registered. Thank you!");
            // Send message
            Transport transport = session.getTransport("smtp");
            transport.connect(host, from, pass);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
            System.out.println("SMS successfully sent");
        } catch (MessagingException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Invalid contact number!");
        }
    }

    class VideoFeedTaker extends Thread {
        /*
        @Override
        public void run() {
//            webcam.setViewSize(new Dimension(176, 144));
//        webcam.setViewSize(WebcamResolution.HQVGA.getSize());
            webcam.open();
            while (isRunning) {
                try {
                    Image image = webcam.getImage();
                    try {
                        jLabelImageHolder.setIcon(new ImageIcon(image));
                    } catch (NullPointerException ex) {
                        Logger.getLogger("");
                    }
                    Thread.sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(DonorRegistrationJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //boolean close = webcam.close();
        } */
    }  

}
